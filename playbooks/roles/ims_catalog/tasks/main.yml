---
#
# Copyright 2023 IBM Inc. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Catalog Services
- name: Catalog Services
  collections:
    - ibm.ibm_zos_core
    - ibm.ibm_zos_ims

  block:

    # - block:

      # - set_fact:
      #     eager_role_path: '{{role_path}}'

      # - include_role:
      #     name: send-template
      #   vars:
      #     path: '{{ eager_role_path }}/templates/DFSALCAT.j2'

      # when: catalog == "allocate" and ( not reconcile_run or (reconcile_run and tmdb_cr_instance.resources[0].status.run_result == 'failedDup') )

    - name: 'Catalog already exists?'
      zos_find:
          patterns: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.*'
          resource_type: cluster
      register: catalog_find_output

    - block: 
      - name: "Allocate catalog data sets"
        zos_data_set:
          batch:
            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.CATDEF'
              state: present
              replace: true
              record_format: FB
              record_length: 80
              block_size: 3200
              type: seq
              space_type: CYL
              space_primary: 50
              space_secondary: 10
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"
            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.A00001'
              state: present
              replace: true
              record_format: FB
              record_length: 4096
              block_size: 4096
              type: seq
              space_type: CYL
              space_primary: 20
              space_secondary: 20
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"
            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.B00001'
              state: present
              replace: true
              record_format: FB
              record_length: 4096
              block_size: 4096
              type: seq
              space_type: CYL
              space_primary: 20
              space_secondary: 20
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"
            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.C00001'
              state: present
              replace: true
              record_format: FB
              record_length: 4096
              block_size: 4096
              type: seq
              space_type: CYL
              space_primary: 20
              space_secondary: 20
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"
            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.D00001'
              state: present
              replace: true
              record_format: FB
              record_length: 4096
              block_size: 4096
              type: seq
              space_type: CYL
              space_primary: 20
              space_secondary: 20
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"

            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.BSDS'
              state: present
              replace: true
              record_format: FB
              record_length: 4096
              block_size: 4096
              type: seq
              space_type: CYL
              space_primary: 20
              space_secondary: 20
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"
            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.DI1001'
              state: present
              replace: true
              record_format: FB
              record_length: 4096
              block_size: 4096
              type: seq
              space_type: CYL
              space_primary: 20
              space_secondary: 20
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"
            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.DI1002'
              state: present
              replace: true
              record_format: FB
              record_length: 4096
              block_size: 4096
              type: seq
              space_type: CYL
              space_primary: 20
              space_secondary: 20
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"
            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.STG'
              state: present
              replace: true
              record_format: FB
              record_length: 4096
              block_size: 4096
              type: seq
              space_type: CYL
              space_primary: 20
              space_secondary: 20
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"
            - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.HWSRCDR'
              state: present
              replace: true
              record_format: vb
              record_length: 22524
              block_size: 22528
              space_type: CYL
              space_primary: 50
              volumes: "{{ DFS_DS_VOLUME2 if not DFS_SMS_ENVIRONMENT else omit }}"
      - name: "Define Catalog Clusters"
        zos_mvs_raw:
          program_name: idcams
          auth: true
          dds:
            - dd_output:
                dd_name: sysprint
                return_content:
                  type: text
            - dd_input:
                dd_name: sysin
                content:
                  - "  DEFINE CLUSTER(                                 -"
                  - "                 NAME({{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.X00001) -"
                  - "                 CYLINDERS(2 1)                   -"
                  - "                 REUSE                            -"
                  - "                 INDEXED                          -"
                  - "                 KEYS(16,5)                       -"
                  - "                 FREESPACE(80 10)                 -"
                  - "                 RECORDSIZE(22 22)                -"
                  - "                 SHAREOPTIONS(3 3)                -"
                  - "                 SPEED                            -"
                  - "                 VOLUMES({{ DFS_DS_VOLUME2 }})               -"
                  - "                )                                 -"
                  - "            DATA(CONTROLINTERVALSIZE(4096))"
                  - "  DEFINE CLUSTER(                                 -"
                  - "                 NAME({{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.L00001) -"
                  - "                 CYLINDERS(1 1)                   -"
                  - "                 REUSE                            -"
                  - "                 FREESPACE(80 10)                 -"
                  - "                 SHAREOPTIONS(3 3)                -"
                  - "                 SPEED                            -"
                  - "                 VOLUMES({{ DFS_DS_VOLUME2 }})               -"
                  - "                )                                 -"
                  - "            DATA(                                   -"
                  - "                 NAME({{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.L00001.D) -"
                  - "                 CISZ(512)                          -"
                  - "                 KEY(9,0)                           -"
                  - "                 RECSZ(50,50)                       -"
                  - "                )                                   -"
                  - "           INDEX(                                   -"
                  - "                 NAME({{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.L00001.S) -"
                  - "                 CISZ(2048)                         -"
                  - "                )"
                  - "  DEFINE CLUSTER(                                 -"
                  - "                 NAME({{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCX000.A00001) -"
                  - "                 CYLINDERS(2 1)                   -"
                  - "                 REUSE                            -"
                  - "                 INDEXED                          -"
                  - "                 KEYS(37,45)                            -"
                  - "                 FREESPACE(80 10)                       -"
                  - "                 RECORDSIZE(82 82)                      -"
                  - "                 SHAREOPTIONS(3 3)                      -"
                  - "                 SPEED                                  -"
                  - "                 VOLUMES({{ DFS_DS_VOLUME2 }})               -"
                  - "                )                                       -"
                  - "            DATA(CONTROLINTERVALSIZE(4096))"

      - name: "Copy DBD for the ims catalog PSB and DBD"
        zos_copy:
          src: "{{ item.src }}"
          dest: "{{ item.dest }}"
          remote_src: true
          force: true 
          volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
        loop:
          - { src: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL(DFSCD000)', dest: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DBDLIB(DFSCD000)' }
          - { src: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL(DFSCX000)', dest: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DBDLIB(DFSCX000)' }
          - { src: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL(DFSCPL00)', dest: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.PSBLIB(DFSCPL00)' }
          - { src: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL(DFSCP001)', dest: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.PSBLIB(DFSCP001)' }
          - { src: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL(DFSCP000)', dest: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.PSBLIB(DFSCP000)' }

      - name: "Perform ACBGEN for the catalog DBD and PSB"
        ims_acb_gen:
          command_input: BUILD
          compression: POSTCOMP
          psb_name: 
            - DFSCPL00
            - DFSCP000
            - DFSCP001
          psb_lib:
            - "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.PSBLIB"
          dbd_lib:
            - "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DBDLIB"
          acb_lib: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.ACBLIB"
          reslib:
            - "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL"
          steplib:
            - "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL"  

      - name: "Defining the IMS Catalog without DBRC"
        zos_mvs_raw:
          program_name: dfs3ucd0
          parm: "REGION=0M"
          dds:
            - dd_data_set:
                dd_name: DFSRESLB
                data_set_name: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL"
                disposition: shr
            - dd_data_set:
                dd_name: STEPLIB
                data_set_name: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL"
                disposition: shr
            - dd_data_set:
                dd_name: IMS
                data_set_name: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DBDLIB"
                disposition: shr
            - dd_data_set:
                dd_name: DFSHDBSC
                data_set_name: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.CATDEF"
                disposition: shr
            - dd_output:
                dd_name: sysprint
                return_content:
                  type: text
            - dd_input:
                dd_name: sysin
                content:
                  - "HALDB=(NAME=DFSCD000)"
                  - "PART=(NAME=DFSCD000,PART=DFSD001,"
                  - "      DSNPREFX={{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000,"
                  - "      KEYSTHEX=FFFFFFFFFFFFFFFFFFFFFFFFFFFF)"
                  - "HALDB=(NAME=DFSCX000)"
                  - "PART=(NAME=DFSCX000,PART=DFSX001,"
                  - "      DSNPREFX={{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCX000,"
                  - "      KEYSTHEX=FFFFFFFFFFFFFFFFFFFFFFFFFFFF)"
        when: not dbrc_enabled 

      when: catalog == "allocate" and (catalog_find_output.matched | int) == 0 
            
    # - name: Allocate IMS catalog DB
    #   command: 'jsub -f {{ uss_file_path }}/DFSALCAT.j2'
      # zos_job_submit: 
      #   max_rc: 16
      #   src: '{{ uss_file_path }}/DFSALCAT.j2'
      #   location: USS
      #   wait: "{{ zos_job_submit_wait }}"
      #   wait_time_s: "{{ zos_job_submit_wait_s }}"
      #   return_output: "{{ zos_job_submit_return_output }}"
      # when: catalog == "allocate" and (catalog_find_output.matched | int) == 0

    - name: Defining Catalog with DBRC 
      ibm.ibm_zos_ims.ims_dbrc:
        command: 
          - INIT.DB   DBD(DFSCD000) TYPHALDB SHARELVL(3)
          - INIT.PART DBD(DFSCD000) PART(DFSCD01) DSNPREFX({{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.DFSCD000) BLOCKSZE(8192,8192,8192,8192) KEYSTRNG('DBD     ZZZZZZZZ') GENMAX(5)
          - INIT.PART DBD(DFSCD000) PART(DFSCP01) DSNPREFX({{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.DFSCD000) BLOCKSZE(8192,8192,8192,8192) KEYSTRNG('PSB     ZZZZZZZZ') GENMAX(5)
          - INIT.DB DBD(DFSCX000) TYPHALDB SHARELVL(3)
          - INIT.PART DBD(DFSCX000) PART(DFSCX01) DSNPREFX({{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.DFSCX000)   GENMAX(3) KEYSTRNG(X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')
          - LIST.DB DBD(DFSCD000) DBDS
          - LIST.DB DBD(DFSCX000) DBDS
        steplib:
          - "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.SDFSRESL"
        dbd_lib: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.DBDLIB"
        recon1: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.RECON1"
        recon2: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.RECON2"
        recon3: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.RECON3"
      when: catalog == "load" and dbrc_enabled

    - name: Load Catalog
      ims_catalog_populate:
        mode: LOAD
        dbrc: "{{ CATALOG_DBRC_ENABLED }}"
        modstat: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.MODSTAT"
        acb_lib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.ACBLIB"
        ]
        reslib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.SDFSRESL"
        ]
        steplib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.SDFSRESL"
        ]
        proclib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.PROCLIB"
        ]
        dbd_lib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.DBDLIB"
        ]
        psb_lib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.PSBLIB"
        ]
        buffer_pool_param_dataset: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.PROCLIB(DFSVSMHP)"
        primary_log_dataset:
          dataset_name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.IMSLOG1'
          disposition: NEW
          normal_disposition: DELETE
          record_format: FB
          record_length: 4092
          block_size: 4096
          primary: 100
          primary_unit: CYL
          secondary: 75
          secondary_unit: CYL
          type: SEQ
        secondary_log_dataset:
          dataset_name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.IMSLOG2'
          disposition: NEW
          normal_disposition: DELETE
          record_format: FB
          record_length: 4092
          block_size: 4096
          primary: 100
          primary_unit: CYL
          secondary: 75
          secondary_unit: CYL
          type: SEQ
        control_statements:
          managed_acbs:
            setup: true
      register: response
      ignore_errors: true
      when: catalog == "load" and ( not reconcile_run or (reconcile_run and tmdb_cr_instance.resources[0].status.run_result == 'failedDup') )

    - fail: 
        msg: '{{response.stderr}}'
      when: 
        - response.rc is defined
        - (response.rc | int) > 8

    - name: Update Catalog
      ims_catalog_populate:
        mode: UPDATE
        dbrc: "{{ CATALOG_DBRC_ENABLED }}"
        modstat: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.MODSTAT"
        acb_lib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.ACBLIB"
        ]
        reslib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.SDFSRESL"
        ]
        steplib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.SDFSRESL"
        ]
        proclib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.PROCLIB"
        ]
        dbd_lib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.DBDLIB"
        ]
        psb_lib: [
          "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.PSBLIB"
        ]
        buffer_pool_param_dataset: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.PROCLIB(DFSVSMHP)"
        primary_log_dataset:
          dataset_name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_IMS_SSID }}.IMSLOG1'
          disposition: NEW
          normal_disposition: DELETE
          record_format: FB
          record_length: 4092
          block_size: 4096
          primary: 100
          primary_unit: CYL
          secondary: 75
          secondary_unit: CYL
          type: SEQ
      register: response
      ignore_errors: true
      when: catalog == "update" and ( not reconcile_run or (reconcile_run and tmdb_cr_instance.resources[0].status.run_result == 'failedDup') )

    - fail: 
        msg: '{{response.stderr}}'
      when: 
        - response.rc is defined
        - (response.rc | int) > 8

    - name: Create ACBs for catalog setup
      ibm.ibm_zos_ims.ims_acb_gen:
        command_input: BUILD
        compression: POSTCOMP
        psb_name:
          - DFSCPL00
          - DFSCP000
          - DFSCP001
        psb_lib: 
          - '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.PSBLIB'
        dbd_lib: 
          - '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DBDLIB'
        acb_lib: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.ACBLIB'
        reslib:
          - '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL'
        steplib:
          - '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL'
      register: response
      ignore_errors: true
      when: catalog == "setup" and ( not reconcile_run or (reconcile_run and tmdb_cr_instance.resources[0].status.run_result == 'failedDup') )

    - fail: 
        msg: '{{response}}'
      when: 
        - response.rc is defined
        - (response.rc | int) > 8

    - name: Query Catalog Service
      ims_command:
        command: QUERY PGM SHOW(DFSCPL00)
        plex:  '{{ DFS_IMSPlex }}'
      when: catalog == "query"

    - name: Delete IMS Catalog
      zos_data_set:
        batch:
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.CATDEF'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.A00001'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.A00002'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.B00001'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.B00002'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.C00001'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.C00002'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.D00001'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.D00002'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.L00001'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.L00001.D'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.L00001.S'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.L00002'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.X00001'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.X00002'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCX000.A00001'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.BSDS'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.DI1001'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.DI1002'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DFSCD000.STG'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
          - name: '{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.HWSRCDR'
            state: absent
            volume: "{{ DFS_DS_VOLUME1 if not DFS_SMS_ENVIRONMENT else omit }}"
      when: catalog == "delete" and (catalog_find_output.matched | int) > 0
